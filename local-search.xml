<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>KDE桌面美化指南 Part 2</title>
    <link href="/2021/02/20/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97-2/"/>
    <url>/2021/02/20/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97-2/</url>
    
    <content type="html"><![CDATA[<p>距离上次写美化过了好久，又回到了Manjaro（就折腾呗😂）。<br />当前KDE已经更新到了5.20，自带的性能监控小插件功能更全也更好看了还多了一些新的插件修复了一些bug然后产生了新的bug，是时候更新下一篇了。</p><p><img src="2021-02-20T225737.png" alt="2021-02-20T225737" /></p><h2 id="顶栏更新"><a class="markdownIt-Anchor" href="#顶栏更新"></a> 顶栏更新</h2><p>首先是顶栏更新了一下，效果如下。</p><p><img src="2021-02-20T231002.png" alt="2021-02-20T231002" /></p><p>和之前主要的不同仅在于性能监控使用了KDE更新到5.20后自带的性能监控Widgets，想要监控什么性能指标自己加就行，啥都有，很全很KDE。自行设置了一下样式，怎么配置应该试试就会了吧～（大概）<br />另外Weather Widgets的一个天气数据来源<code>yr.no</code>由于站点更新，当前插件已经不支持了，改用<code>OWM</code>吧。</p><h2 id="字体调整"><a class="markdownIt-Anchor" href="#字体调整"></a> 字体调整</h2><p>Linux下字体渲染要比Windows下号很多，所以字号即使比较小看起来效果也比Windows下的大字要舒服些（个人觉得吧），中文字体推荐使用Noto Sans SC，不同的系统下命名可能不同，比如Manjaro下就叫Noto Sans CJK SC。字号稍微调大一些，同时把字体渲染拉满就行，凭个人感觉来。</p><p><img src="2021-02-20T232309.png" alt="2021-02-20T232309" /></p><p>如果你装系统的时候选的是英文的话（事实上推荐这么做），这个中文字体很可能是缺失的，安装好语言的支持包即可，只要不去改变系统语言就行。或者单独安装Noto Sans字体。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">sudo pacman -Ss noto-fonts</span></span><br><span class="line">extra/noto-fonts 20201226-1 [installed]</span><br><span class="line">    Google Noto TTF fonts</span><br><span class="line">extra/noto-fonts-cjk 20201206-1 [installed]</span><br><span class="line">    Google Noto CJK fonts</span><br><span class="line">extra/noto-fonts-emoji 20200916-1 [installed]</span><br><span class="line">    Google Noto emoji fonts</span><br><span class="line">extra/noto-fonts-extra 20201226-1</span><br><span class="line">    Google Noto TTF fonts - additional variants</span><br><span class="line">community/noto-fonts-compat 20151217-1 [installed]</span><br><span class="line">    Google Noto TTF fonts (compat-package)</span><br></pre></td></tr></table></figure><p>至于某些应用中，比如Chrome中的字体，在应用自身的设置中是可以调整的，可以独立配置。</p><h2 id="shell相关的配置工作"><a class="markdownIt-Anchor" href="#shell相关的配置工作"></a> Shell相关的配置工作</h2><p>用Linux怎么会少的了用Shell呢。个人来讲更多是通过下拉式的Shell，比如yakuake，对应Gnome下一般就是Guake。毕竟开个Konsole还要多一个窗口，窗口一多就乱了…</p><h3 id="yakuake主题"><a class="markdownIt-Anchor" href="#yakuake主题"></a> Yakuake主题</h3><p>yysy，yakuake就没找到好看的主题QwQ。所以最后是魔改了<code>transparent-tabs</code>这一个主题，一路用到现在，反正只要够简洁就行了，效果如下。</p><p><img src="2021-02-20T234156.png" alt="2021-02-20T234156" /></p><p>直接把主题中的白边删了，弄成了简单的一条透明的标签栏。<a href="https://drive.google.com/file/d/1qsMTPaod6x1N6C0_agJh9LKn0BDIJ6dh/view?usp=sharing">下载连接在此</a>。解压后将主题文件夹放到<code>~/.local/share/yakuake/kns_skins/</code>即可，文件夹没有则自行创建。</p><p>Warning: 使用这个主题后，你会发现Yakuake的设置没地方打开了！使用快捷键<code>Ctrl+Shift+,</code>可以打开设置。</p><h3 id="yakuake终端颜色主题"><a class="markdownIt-Anchor" href="#yakuake终端颜色主题"></a> Yakuake终端颜色主题</h3><p>除了Yakuake的边框外观，还有Shell的颜色配置需要设置，不然是没有上面的透明度的。直接在Yakuake终端的空白处<code>右键&gt;Edit Current Profile...&gt;Appearance</code>配置颜色主题，选择一个黑色主题即可，并点<code>Edit</code>拉低其中的透明度即可。</p><p><img src="2021-02-21T002141.png" alt="2021-02-21T002141" /></p><h3 id="zsh主题和插件"><a class="markdownIt-Anchor" href="#zsh主题和插件"></a> ZSH主题和插件</h3><p>ZSH不必多说吧，反正对于我来说已经习惯成自然了，必须装一个。</p><p>安装了ZSH之后首先装一下Oh My Zsh，安装方法见<a href="https://ohmyz.sh/#install">官网</a>或者这边：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><p>安装后会发现<code>.zshrc</code>更新了。接下来安装下ZSH的主题，配置一下常用的插件即可。主题推荐使用<a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a>，因为我们用的是Oh My Zsh，所以安装方法也用Oh My Zsh对应的方法，引用下项目的README中的安装方法：</p><blockquote><p><strong>Oh My Zsh</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>Users in mainland China can use the official mirror on <a href="http://gitee.com">gitee.com</a> for faster download.<br />中国大陆用户可以使用 <a href="http://gitee.com">gitee.com</a> 上的官方镜像加速下载.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure><p>Set ZSH_THEME=“powerlevel10k/powerlevel10k” in ~/.zshrc.</p></blockquote><p>很贴心给了镜像。简单来讲就是运行给出的指令，然后改一下<code>.zshrc</code>就行了，下一次打开zsh时会跳出主题的一个配置过程，按照指示依次选定想要的样式，最后保存配置，ZSH主题就配置完成了，效果就和上面yakuake截图中一样。</p><p>至于插件，只需要autojump, zsh-autosuggestions和zsh-syntax-highlighting就行，安装方法可以参照另一个博主的<a href="https://www.zrahh.com/archives/167.html">这篇文章</a>，个人觉得这几个足矣。其中<code>autojump</code>在Linux下的安装不用那么麻烦，而且还可能不见得装的上，manjaro直接从AUR装就可以了，或者<code>archlinuxcn</code>中带了。</p><p>三个ZSh插件功能如下：</p><ul><li><strong>autojump</strong> 任何位置使用<code>j xxx</code>即可跳转到对应的目录，而且不用写全目录名称。前提是这个目录之前访问过。</li><li><strong>zsh-autosuggestions</strong> 会记住之前的命令输入历史，在输入命令时自动显示出过去输入过的命令，按右方向键<code>&gt;</code>即可自动填充。</li><li><strong>zsh-syntax-highlighting</strong> 会给输入的命令高亮，输错了的命令会显示成红色。</li></ul><p>效果如下图：</p><p><img src="2021-02-21T003034.png" alt="2021-02-21T003034" /></p><h2 id="输入法配置和主题"><a class="markdownIt-Anchor" href="#输入法配置和主题"></a> 输入法配置和主题</h2><p>最后来讲下输入法的问题吧，毕竟打字还是要个中文输入法的。个人使用的是Fcitx，虽然Fcitx 5已经出了，但还是用的4。</p><p>安装就不说了，主题依然是使用了一个魔改后的主题，受害者是Material主题，来源已经不清楚了，应该是从Github上找到。魔改后的效果如下图，附<a href="https://drive.google.com/file/d/192uBLNoPpNklZr8RbhuOxnrVmIXvvMAu/view?usp=sharing">下载链接</a>，解压后放置到<code>~/.config/fcitx/skin/</code>，然后去Fcitx设置中改主题即可。</p><p><img src="2021-02-21T003807.png" alt="2021-02-21T003807" /></p><p>至于输入法的配置，个人使用的是LibPinyin，另外在LibPinyin的设置中开了一些模糊音和词库，以及添加了搜狗的细胞词库，总的来说还凑合，词的提示不怎么智能就是了。云拼音建议打开。</p><p>另外，一定要更新Fcitx以及其他的包到新版，旧的版本可能会有问题，比如细胞词库导入不了，或者云拼音出不来等等。</p><hr /><p>至此告一段落吧，笔者是个只有兴起才会写写的懒人…<br />不过最近更新主题之后，评论功能也开了～</p>]]></content>
    
    
    <categories>
      
      <category>Linux - Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KDE桌面美化指南 Part 1</title>
    <link href="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/"/>
    <url>/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<p>在经历了Linux环境的持续动荡之后，终于再一次配好了博客的环境。<br />在系统变更的过程中更迭了多次不同的发行版本，也尝试了许多次的主题美化，最终桌面美化的结果也大致稳定下来。</p><p>同时，用了半个学期的Manjaro终究还是有硬件兼容问题，所以重新回归了openSUSE Tumbleweed，正好借重新配置的机会谈一谈KDE下的主题美化，记录下配置过程。</p><p>目前Manjaro这边则已经配置完全，用Manjaro的状况来展示下最终的预期效果：</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/manjaro-final.png" class="" title="manjaro-final"><span id="more"></span><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/dock-view.png" class="" title="dock-view"><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/switch-virtual-desktop.png" class="" title="switch-virtual-desktop"><h2 id="why-kde"><a class="markdownIt-Anchor" href="#why-kde"></a> Why KDE?</h2><p>国内应为ubuntu的热度一直居高不下，所以很多时候接触的往往是Gnome桌面环境，当然在早一些可能是已经凉凉的Unity（比如我最初接触的就是Unity）。<br />之所以选择KDE，主要还是应为以下几个原因：</p><p><strong>1. KDE拥有真正充分的可定制性</strong></p><p>你会发现在Gnome下，一个图标换起来都很麻烦。</p><p><strong>2. KDE Connect太香了</strong></p><p>你不知道KDE Connect? 不了解下？<br />能衔接上一部分手机的生态，对于改善日常的Linux体验还是有不小的提升的，尤其是需要互发文件的时候。</p><h2 id="初始桌面"><a class="markdownIt-Anchor" href="#初始桌面"></a> 初始桌面</h2><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/kde-init-desktop.png" class="" title="kde-init-desktop"><p>相对来说，openSUSE的初始桌面其实也满不错的～</p><h2 id="kde-store"><a class="markdownIt-Anchor" href="#kde-store"></a> KDE Store</h2><p>首先推荐KDE Store：<a href="https://store.kde.org">https://store.kde.org</a><br />类似的Gnome也有主题站点。</p><p>里面的内容和KDE下各类设置&gt;获取主题中的内容是一致的，从中可以方便地寻找好的主题。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/kde-store.png" class="" title="kde-store"><h2 id="step-1-主题配置"><a class="markdownIt-Anchor" href="#step-1-主题配置"></a> Step 1. 主题配置</h2><p>KDE设置中即提供了一系列的主题相关的配置，决定了总体的桌面风格，所以第一部即设置好这一系列的配置。以下的配置项如果找不到，只需要在设置&gt;搜索栏搜索即可。</p><h3 id="1-全局主题"><a class="markdownIt-Anchor" href="#1-全局主题"></a> 1. 全局主题</h3><p>全局主题使用<a href="https://github.com/vinceliuice">vinceliuice</a>的McMojave LAF，这位国人dalao真的作了相当多很赞的主题QwQ。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/mocmojave-laf.png" class="" title="mocmojave-laf"><p>比较好的主题普遍都会有黑白两种不同的版本，这个按照个人的喜好选择。个人选择了黑系的主题，应为经常半夜写代码所以白色会觉得刺眼 <code>(ノへ￣、)</code> ，效果如下。全局主题会替换掉下面的Plasma样式、应用样式、颜色、窗口装饰以及图标，算是一个总体的配置方案。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/mocmojave-laf-apply.png" class="" title="mocmojave-laf-apply"><p>需要注意的是直接通过设置提供的下载会比较慢，推荐配置好代理再下载。</p><h3 id="2-plasma样式"><a class="markdownIt-Anchor" href="#2-plasma样式"></a> 2. Plasma样式</h3><p>理论上讲，应用了全局主题之后，在设置&gt;Plasma样式中应该已经转变为了McMojave主题。</p><h3 id="3-应用样式"><a class="markdownIt-Anchor" href="#3-应用样式"></a> 3. 应用样式</h3><p>之前的设置都是正对全局的，比如你的各类菜单，以及你的桌面面板都会受以上的配置影响，而应用样式主要决定应用内的显示效果。<br />应用样式选择Kvantum-dark，之后会对Kvantum主题进行配置。</p><h3 id="4-gnomegtk-应用程序主题"><a class="markdownIt-Anchor" href="#4-gnomegtk-应用程序主题"></a> 4. GNOME/Gtk 应用程序主题</h3><p>这一个主题主要是影响使用GTK的程序的，KDE是Qt党，所以之前的配置大多只针对Qt有效。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/gtk-theme.png" class="" title="gtk-theme"><h3 id="5-图标主题"><a class="markdownIt-Anchor" href="#5-图标主题"></a> 5. 图标主题</h3><p>比较特殊的是只要应用了McMojave这一个全局主题，图标就都空了，可能是它应用的图标主题没安装。</p><p>推荐的图标主题主要有以下几种，当然都可以在设置&gt;图标中联网获取和设置。</p><p><strong>La Capitaine</strong></p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/la-capitaine.png" class="" title="la-capitaine"><p><strong>McMojave-circle</strong></p><p>这一个主题的好处是缺失的图标会从numix-circle中继承，这样你只需要同时安装好numix-circle，就可以补全一部分缺失的图标。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/McMojave-Circle.png" class="" title="McMojave-Circle"><h2 id="step-2-设置kvantum"><a class="markdownIt-Anchor" href="#step-2-设置kvantum"></a> Step 2. 设置Kvantum</h2><p>首先安装Kvantum Manager。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in kvantum-manager kvantum-manager-lang</span><br></pre></td></tr></table></figure><p>然后需要安装一个Kvantum主题，这边依旧选择McMojave主题，可以从<a href="https://store.kde.org/p/1304957">KDE Store下载</a>。</p><p>之后将下载下来的<code>tar.xz</code>压缩包解压，然后打开Kvantum Manager，选择这一个文件夹，安装主题。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/kvantum-install.jpg" class="" title="kvantum安装主题"><p>接着将主题设置为McMojave，开始调整一些主题配置。在 合成&amp;一般外观 里面选择忽略非活动状态，并降低窗口和菜单的透明度，即可获得很好的磨砂效果。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/kvantum-setting.png" class="" title="kvantum设置"><h2 id="step-3-桌面dock和插件配置"><a class="markdownIt-Anchor" href="#step-3-桌面dock和插件配置"></a> Step 3. 桌面Dock和插件配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zypper in latte-dock</span><br></pre></td></tr></table></figure><p>目前（写作时）latte-dock的版本还只是0.9，为了获取悬空的效果所以实际安装了从Git源码编译的0.10版本，这一个版本应该不久就会正式发布。</p><p>接下来启动Latte Dock，并设置好它的开机启动（KDE中搜索”自动启动“应用），然后对Latte Dock的外观进行一些配置。</p><p>现在你可以在桌面上 右键&gt;添加部件，来为Latte Dock添加一些小部件，同样的你可以点击下方的按钮联网获取新的小部件。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/add-widget.png" class="" title="add-widget"><p>latte-dock只需要装一个额外的小部件：</p><ul><li><strong>Latte Seperator</strong>：Latte Dock上分隔用的小横线</li></ul><p>另外的部件都是用于顶栏的，从左到右使用到的小部件分别是：</p><ul><li><strong>Application title</strong>：显示当前的应用名称，推荐改下设置，只显示应用名。</li><li><strong>Window AppMenu Applet</strong>：这一个插件<strong>不能在设置里安装</strong>！需要编译安装，幸运的是openSUSE的软件源中自带了，通过<code>sudo zypper in applet-window-appmenu</code>安装即可。</li><li><strong>颜色拾取器</strong>：自带的。</li><li><strong>Netspeed Widget</strong>：网速显示。</li><li><strong>系统符合查看器</strong>：自带的，不过为了适合主题要改下其设置，调整下颜色方案。</li><li><strong>Weather Widge</strong>：一个UI不错的天气插件，特别是带了磨砂后看起来很赞。需要设置以下地理位置，并且勾上 <code>Appearance&gt;Render meteogram for yr.no</code>，否则雨量的图形会是一片白的背景。</li></ul><blockquote><p>Warning: <code>yr.no</code>更新了网页之后，<code>Weather Widge</code>插件没有更新，已经废了，推荐使用插件中另一个<code>OWM</code>天气站点。</p></blockquote><ul><li><strong>系统托盘</strong>：自带。</li><li><strong>Event Calendar</strong>：可以同步Google日历。需要设置下时间的格式等，也同时带有类似的天气界面。</li></ul><p>按照以上的配置后的顶栏效果如下：</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/top-bar-final.png" class="" title="top-bar-final"><p>接下来对Latte Dock进行配置，把想要的应用拖进取，左边添加一个自带的全屏形式的应用程序面板，右边则添加一个虚拟桌面调度器。</p><img src="/2020/06/30/KDE%E6%A1%8C%E9%9D%A2%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8D%97/latte-dock-final.png" class="" title="latte-dock-final"><h2 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h2><p>以上主要设置了一下整体的主题和Kvantum主题，并添加了一些桌面插件，整理了桌面的外观。<br />目前一个大致的主题已经有了，其他还有一些细节的配置，主要还有以下这些：</p><ul><li>Dolphin的外观</li><li>Yakuake的主题配置</li><li>字体调整</li><li>Fcitx主题调整</li><li>终端主题的配置</li><li>KDE动画效果的调整</li><li>触摸板手势</li><li>应用、桌面、活动切换的配置</li><li>屏幕边缘动作</li><li>…（还差亿点）</li></ul><p>这些就之后再说～<br />想到这里突然又想继续用之前的Manjaro了<code>(￣ε(#￣)☆╰╮o(￣皿￣///)</code>。</p><p>真的全部配置完还是不容易，所以要好好珍惜系统，远离ubuntu，选用支持Btrfs的系统，特别是openSUSE这样带有业界最好的原生Btrfs快照备份设置的系统，设置好Btrfs备份，并按时做额外的分区备份。<code>（づ￣3￣）づ</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux - Theme</category>
      
    </categories>
    
    
    <tags>
      
      <tag>主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Btrfs文件系统</title>
    <link href="/2020/04/01/Btrfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/04/01/Btrfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>Btrfs文件系统已经逐渐被各种Linux发行版本支持（作为系统分区格式），Btrfs具备CoW（写时复制）的特性，相比于之前的很多文件系统增添了很多特殊的功能，本文对其中的常用功能进行了介绍。<br />但是由于文件系统操作不当容易丢失数据，操作之前记得做好额外备份。</p><span id="more"></span><h2 id="写时复制"><a class="markdownIt-Anchor" href="#写时复制"></a> 写时复制</h2><p>写时复制（Copy-on-write, CoW）指了在多个调用者请求相同资源时，只有在某个调用者试图修改资源的内容时，系统才会为其复制一份专用副本。这样没有写操作的时候，就不会有多余的副本被创建。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><br />CoW的缺点之一在于对于像VM镜像、数据库文件这样的就地更改（updated-in-place）的文件，会导致写入<strong>碎片化</strong>。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>所以对于这一类数据，不妨建一个子卷然后禁用CoW来储存他们。（别忘了修改<code>fstab</code>）</p><p>Btrfs默认启用写时复制，要停止使用写时复制，使用<code>nodatacow</code>选项，但是这一更改只会影响新创建的文件，对于已有文件（夹）使用下列命令进行修改，但仍存在一些细节问题，使用前务必参见参考资料中关于此节的详细描述<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +C &lt;/path/to/file/or/folder&gt;</span><br></pre></td></tr></table></figure><h2 id="子卷subvolume"><a class="markdownIt-Anchor" href="#子卷subvolume"></a> 子卷（Subvolume）<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></h2><p>Btrfs通过Subvolume来实现在备份时排除某些文件夹。</p><h3 id="挂载子卷"><a class="markdownIt-Anchor" href="#挂载子卷"></a> 挂载子卷</h3><p>通过设置挂载的选项可以挂载指定的子卷：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o subvol=&lt;subvol&gt; &lt;device&gt; &lt;mount_path&gt;</span><br></pre></td></tr></table></figure><h3 id="子卷的修改操作"><a class="markdownIt-Anchor" href="#子卷的修改操作"></a> 子卷的修改操作</h3><h4 id="列出子卷"><a class="markdownIt-Anchor" href="#列出子卷"></a> 列出子卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btrfs subvolume list -p path</span><br></pre></td></tr></table></figure><p>使用后会列出对应<code>path</code>下的所有子卷，其数量可能会很多，因为所有的快照也以subvolume的形式储存，有意思的是Docker镜像也被保存为了subvolume：</p><h4 id="创建子卷"><a class="markdownIt-Anchor" href="#创建子卷"></a> 创建子卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btrfs subvolume create &lt;/path/to/subvolume&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>path</code>指的是子卷的绝对路径，比如当前挂载了<code>@</code>到<code>/mnt/@</code>目录下，则使用路径<code>/mnt/@/home</code>创建出来的子卷为<code>@/home</code>。</p></blockquote><h4 id="删除子卷"><a class="markdownIt-Anchor" href="#删除子卷"></a> 删除子卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btrfs subvolume delete /path/to/subvolume</span><br></pre></td></tr></table></figure><blockquote><p>如果只移除文件目录，而不使用<code>btrfs subvolume delete</code>命令并不会真正删除一个子卷。</p></blockquote><h4 id="默认子卷"><a class="markdownIt-Anchor" href="#默认子卷"></a> 默认子卷</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取默认子卷</span></span><br><span class="line">btrfs subvolume get-default /</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置默认子卷</span></span><br><span class="line">btrfs subvolume set-default &lt;subvolume-id&gt; /</span><br></pre></td></tr></table></figure><h4 id="临时挂载"><a class="markdownIt-Anchor" href="#临时挂载"></a> 临时挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用路径挂载</span></span><br><span class="line">mount -t btrfs -o subvol=&lt;subvolume&gt; &lt;/mount/point&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用<span class="built_in">id</span>挂载</span></span><br><span class="line">mount -t btrfs -o subvolid=&lt;id&gt; &lt;/dev/device&gt; &lt;/mount/point&gt;</span><br></pre></td></tr></table></figure><h3 id="btrfs子卷组织形式的探究"><a class="markdownIt-Anchor" href="#btrfs子卷组织形式的探究"></a> Btrfs子卷组织形式的探究<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></h3><p>在openSUSE中查看当前的Btrfs的子卷，可能会显示大量的子卷，因为snapshot实际也是通过子卷来实现的，另外值得注意的是Docker镜像也被作为snapshot独立开了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">sudo btrfs subvolume list /</span></span><br><span class="line">ID 256 gen 90 top level 5 path @</span><br><span class="line">ID 257 gen 113574 top level 256 path @/var</span><br><span class="line">...</span><br><span class="line">ID 263 gen 113574 top level 256 path @/home</span><br><span class="line">ID 266 gen 112569 top level 256 path @/.snapshots</span><br><span class="line">ID 298 gen 98293 top level 257 path @/var/lib/docker/btrfs/subvolumes/ce11ad5...    # docker镜像</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中<code>@</code>代表了文件系统的根（rootfs），但事实上它也仍然是一个snapshot，最顶层的卷是以0为标号的子卷，不过通常不使用。<br />同时默认的<code>/</code>同样也不是<code>@</code>子卷，一般也是某一个子卷，只是默认被挂载为了<code>/</code>，通过查看默认子卷可以得知：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash">btrfs subvolume get-default /</span></span><br><span class="line">ID 267 gen 113599 top level 266 path @/.snapshots/1/snapshot  # 一个snapshot被作为默认子卷，挂载为了文件系统的 `/` 目录</span><br></pre></td></tr></table></figure><p>可见当前系统的<code>/</code>实际上是一个路径为<code>@/.snapshots/1/snapshot</code>的子卷，真正的<code>@</code>在openSUSE中是隔离开的，作为独立的根来储存需要永久保存的子卷。</p><h3 id="创建子卷的正规步骤"><a class="markdownIt-Anchor" href="#创建子卷的正规步骤"></a> 创建子卷的正规步骤</h3><p>正如上述讨论，由于目前的系统目录也是一个（临时）快照。<br />如果我们此时要创建一个子卷，不可以建立在一个一个已有的快照下，否则在进行rollback操作后就不能再删除这个子卷了。正确的操作因该是将这个子卷建立在<code>@</code>子卷下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mount /dev/sda2 -o subvol=@ /mnt</span><br><span class="line">sudo btrfs subvolume create /mnt/usr/important</span><br><span class="line">sudo umount /mnt</span><br></pre></td></tr></table></figure><h2 id="快照"><a class="markdownIt-Anchor" href="#快照"></a> 快照</h2><p>Btrfs的快照是建立在其“写时复制”的功能基础上的。<br />创建快照可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btrfs subvolume snapshot &lt;/path/to/source&gt; &lt;/path/to/dest&gt;</span><br></pre></td></tr></table></figure><blockquote><p>对于openSUSE，目标目录通常为<code>/.shapshots</code>，这一目录为默认的统一存放快照的目录。<br />另外添加参数<code>-r</code>可以创建只读快照，在只读快照上再创建一个快照可以获得只读快照的一个可写版本。</p></blockquote><p>注意快照<strong>不是递归包含</strong>的，意味着子卷里的子卷在快照中会是空目录。<br />这也是为什么openSUSE下部分目录被排除在默认的snapper备份之外：它们都被创建为了额外的子卷，由于上述非递归性，他们在对<code>/</code>创建的快照中均被忽略了。</p><h2 id="btrfs启用压缩"><a class="markdownIt-Anchor" href="#btrfs启用压缩"></a> Btrfs启用压缩<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></h2><p>在openSUSE中是支持Btrfs的压缩功能的，通过<code>mount</code>的参数可以启用压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o compress &lt;/dev/sdx&gt; &lt;/mount/point&gt;</span><br></pre></td></tr></table></figure><p><code>compress</code>的默认规则是：如果你创建了一个文件，Btrfs压缩后发现压缩率低，那对于之后的写入它都不再会进行压缩。如果不希望这样，可以使用<code>compress-force</code>。<br />对于已经写入的文件，均不会被压缩，<strong>压缩仅对新写入的文件有效</strong>。</p><p>压缩有三种算法可选：</p><ol><li><strong>lzo</strong>：压缩率低但是CPU资源占用少。</li><li><strong>zlib</strong>：压缩率高但是资源占用多。</li><li><strong>zstd</strong>：旧版本内核和<code>GRUB</code>引导对其缺乏支持，暂时忽略。</li></ol><p>在<code>fstab</code>中永久启用压缩，并指定压缩算法（算法以不指定）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UUID=1a2b3c4d /home btrfs subvol=@/home,compress=lzo  0   0</span><br></pre></td></tr></table></figure><h2 id="使用snapper进行管理"><a class="markdownIt-Anchor" href="#使用snapper进行管理"></a> 使用snapper进行管理<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></h2><p><code>snapper</code>通过一系列的配置来管理Btrfs分区，配置文件默认位于<code>/etc/snapper/configs/</code>下。<br />默认的方案只为<code>/</code>创建快照，且内容还要排除名下的子卷。</p><h3 id="创建一个新的配置"><a class="markdownIt-Anchor" href="#创建一个新的配置"></a> 创建一个新的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo snapper -c &lt;config-name&gt; create-config &lt;/path&gt;</span><br></pre></td></tr></table></figure><p>这一操作会创建一个快照并从<code>/etc/snapper/config-templates/default</code>获取一套默认配置。</p><h3 id="配置快照的设置"><a class="markdownIt-Anchor" href="#配置快照的设置"></a> 配置快照的设置</h3><p>见openSUSE<a href="https://documentation.suse.com/zh-cn/sles/12-SP4/html/SLES-all/cha-snapper.html#sec-snapper-config-modify">相关文档的对应章节</a>，以获得更准确的信息。</p><p>使用<code>snapper -c home set-config &quot;&lt;KEY&gt;=&lt;value&gt;&quot;</code>来修改设置。</p><!-- footnotes --><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://zh.wikipedia.org/wiki/%E5%AF%AB%E5%85%A5%E6%99%82%E8%A4%87%E8%A3%BD">写入时复制 | 维基百科</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Copy_on_Write_.28CoW.29">关于CoW的缺点 | SysadminGuide - btrfs Wiki</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://wiki.archlinux.org/index.php/Btrfs_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%86%99%E6%97%B6%E5%A4%8D%E5%88%B6_(CoW)">写时复制 | Btrfs (简体中文) - ArchWiki</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://wiki.archlinux.org/index.php/Btrfs_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E5%AD%90%E5%8D%B7">子卷 | Btrfs (简体中文) - ArchWiki</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://forums.opensuse.org/showthread.php/521277-LEAP-42-2-btrfs-root-filesystem-subvolume-structure">关于openSUSE上的Btrfs结构的讨论 | LEAP 42.2 btrfs root filesystem subvolume structure</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://en.opensuse.org/SDB:BTRFS#Compressed_btrfs_filesystems">在挂载时启用压缩功能 | #Compressed btrfs filesystems - SDB:BTRFS - openSUSE Wiki</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://documentation.suse.com/zh-cn/sles/12-SP4/html/SLES-all/cha-snapper.html#sec-snapper-config">通过 Snapper 进行系统恢复和快照管理 | 管理指南 | SUSE Linux Enterprise Server 12 SP4</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
